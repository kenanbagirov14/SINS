// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NIS.DALCore.Context;

namespace NIS.DALCore.Migrations
{
    [DbContext(typeof(NISContext))]
    [Migration("20191125200335_ff")]
    partial class ff
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.11-servicing-32099")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("NIS.DALCore.Context.Area", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AreaPrefix");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasMaxLength(255);

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.Property<int>("RegionId");

                    b.HasKey("Id");

                    b.HasIndex("RegionId");

                    b.ToTable("Area");
                });

            modelBuilder.Entity("NIS.DALCore.Context.Attachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CommentId");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime");

                    b.Property<int?>("CustomerRequestId");

                    b.Property<string>("Description")
                        .HasMaxLength(255);

                    b.Property<string>("FilePath")
                        .HasMaxLength(255);

                    b.Property<int?>("FileType");

                    b.Property<int?>("MainTaskId");

                    b.HasKey("Id");

                    b.HasIndex("CommentId");

                    b.HasIndex("CustomerRequestId");

                    b.HasIndex("MainTaskId");

                    b.ToTable("Attachment");
                });

            modelBuilder.Entity("NIS.DALCore.Context.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .HasColumnType("ntext");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("MainTaskId");

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("MainTaskId");

                    b.HasIndex("UserId");

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("NIS.DALCore.Context.CustomerRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AON")
                        .HasColumnName("AON")
                        .HasMaxLength(50);

                    b.Property<string>("ContactNumber")
                        .HasMaxLength(50);

                    b.Property<string>("ContractNumber")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("CreatedUserId");

                    b.Property<string>("CustomerName")
                        .HasMaxLength(50);

                    b.Property<int?>("CustomerNumber");

                    b.Property<int>("CustomerRequestTypeId");

                    b.Property<int?>("DepartmentId");

                    b.Property<string>("Description")
                        .HasMaxLength(250);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MailUniqueId")
                        .HasMaxLength(256);

                    b.Property<int?>("RatingId");

                    b.Property<int?>("RegionId");

                    b.Property<int?>("RequestStatusId");

                    b.Property<int?>("SourceTypeId");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("RatingId");

                    b.HasIndex("RegionId");

                    b.HasIndex("RequestStatusId");

                    b.HasIndex("SourceTypeId");

                    b.HasIndex("CustomerRequestTypeId", "SourceTypeId", "CreatedUserId")
                        .HasName("_dta_index_CustomerRequest_14_2053582354__K2_K12_K4");

                    b.HasIndex("Id", "CustomerRequestTypeId", "CreatedUserId", "CustomerName", "CustomerNumber", "Text", "StartDate", "CreatedDate", "Description", "ContactNumber", "SourceTypeId", "RegionId", "RequestStatusId", "RatingId", "Email", "MailUniqueId", "ContractNumber", "AON", "DepartmentId")
                        .HasName("_dta_index_CustomerRequest_14_2053582354__K3_1_2_4_5_6_7_8_9_10_11_12_13_14_15_16_17_18_19");

                    b.HasIndex("Id", "CustomerRequestTypeId", "DepartmentId", "CreatedUserId", "CustomerName", "CustomerNumber", "Text", "StartDate", "CreatedDate", "Description", "ContactNumber", "RegionId", "RequestStatusId", "RatingId", "Email", "MailUniqueId", "ContractNumber", "AON", "SourceTypeId")
                        .HasName("_dta_index_CustomerRequest_14_2053582354__K12_1_2_3_4_5_6_7_8_9_10_11_13_14_15_16_17_18_19");

                    b.HasIndex("Id", "CustomerRequestTypeId", "DepartmentId", "CreatedUserId", "CustomerName", "CustomerNumber", "Text", "StartDate", "CreatedDate", "Description", "ContactNumber", "SourceTypeId", "RegionId", "RatingId", "Email", "MailUniqueId", "ContractNumber", "AON", "RequestStatusId")
                        .HasName("_dta_index_CustomerRequest_14_2053582354__K14_1_2_3_4_5_6_7_8_9_10_11_12_13_15_16_17_18_19");

                    b.HasIndex("Id", "CustomerRequestTypeId", "DepartmentId", "CreatedUserId", "CustomerName", "CustomerNumber", "Text", "StartDate", "CreatedDate", "Description", "ContactNumber", "SourceTypeId", "RegionId", "RequestStatusId", "Email", "MailUniqueId", "ContractNumber", "AON", "RatingId")
                        .HasName("_dta_index_CustomerRequest_14_2053582354__K15_1_2_3_4_5_6_7_8_9_10_11_12_13_14_16_17_18_19");

                    b.HasIndex("Id", "CustomerRequestTypeId", "DepartmentId", "CreatedUserId", "CustomerName", "CustomerNumber", "Text", "StartDate", "CreatedDate", "Description", "ContactNumber", "SourceTypeId", "RequestStatusId", "RatingId", "Email", "MailUniqueId", "ContractNumber", "AON", "RegionId")
                        .HasName("_dta_index_CustomerRequest_14_2053582354__K13_1_2_3_4_5_6_7_8_9_10_11_12_14_15_16_17_18_19");

                    b.HasIndex("Id", "CustomerRequestTypeId", "DepartmentId", "CustomerName", "CustomerNumber", "Text", "StartDate", "CreatedDate", "Description", "ContactNumber", "SourceTypeId", "RegionId", "RequestStatusId", "RatingId", "Email", "MailUniqueId", "ContractNumber", "AON", "CreatedUserId")
                        .HasName("_dta_index_CustomerRequest_14_2053582354__K4_1_2_3_5_6_7_8_9_10_11_12_13_14_15_16_17_18_19");

                    b.HasIndex("Id", "DepartmentId", "CustomerName", "CustomerNumber", "Text", "StartDate", "CreatedDate", "Description", "ContactNumber", "SourceTypeId", "RegionId", "RequestStatusId", "RatingId", "Email", "MailUniqueId", "ContractNumber", "AON", "CustomerRequestTypeId", "CreatedUserId")
                        .HasName("_dta_index_CustomerRequest_14_2053582354__K2_K4_1_3_5_6_7_8_9_10_11_12_13_14_15_16_17_18_19");

                    b.ToTable("CustomerRequest");
                });

            modelBuilder.Entity("NIS.DALCore.Context.CustomerRequestArchive", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AON")
                        .HasMaxLength(50);

                    b.Property<string>("ContactNumber")
                        .HasMaxLength(50);

                    b.Property<string>("ContractNumber")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("CreatedUserId");

                    b.Property<string>("CustomerName");

                    b.Property<int?>("CustomerNumber");

                    b.Property<int>("CustomerRequestTypeId");

                    b.Property<int?>("DepartmentId");

                    b.Property<string>("Description");

                    b.Property<string>("Email");

                    b.Property<string>("MailUniqueId");

                    b.Property<int?>("RatingId");

                    b.Property<int?>("RegionId");

                    b.Property<int?>("RequestStatusId");

                    b.Property<int?>("SourceTypeId");

                    b.Property<DateTime?>("StartDate");

                    b.Property<string>("Text");

                    b.HasKey("Id");

                    b.ToTable("CustomerRequestArchive");
                });

            modelBuilder.Entity("NIS.DALCore.Context.CustomerRequestType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Alias");

                    b.Property<bool?>("AutoCreateTask");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime");

                    b.Property<int?>("DepartmentId");

                    b.Property<string>("Description")
                        .HasMaxLength(255);

                    b.Property<int>("ExecutionDay");

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.Property<int?>("ParentRequestTypeId");

                    b.Property<int?>("SourceTypeId");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("ParentRequestTypeId");

                    b.HasIndex("SourceTypeId");

                    b.ToTable("CustomerRequestType");
                });

            modelBuilder.Entity("NIS.DALCore.Context.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Alias");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime");

                    b.Property<int?>("CuratorUserId");

                    b.Property<int?>("DefaultUserId");

                    b.Property<int?>("DepartmentPrefix");

                    b.Property<string>("DepartmentType")
                        .HasMaxLength(1);

                    b.Property<string>("Description")
                        .HasMaxLength(250);

                    b.Property<string>("Email")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .HasMaxLength(50);

                    b.Property<int?>("ParentDepartmentId");

                    b.Property<int?>("Phone");

                    b.HasKey("Id");

                    b.HasIndex("DefaultUserId");

                    b.HasIndex("ParentDepartmentId")
                        .HasName("IX_ParentDepartmentId");

                    b.ToTable("Department");
                });

            modelBuilder.Entity("NIS.DALCore.Context.Engineer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(100);

                    b.Property<string>("FirstName")
                        .HasMaxLength(50);

                    b.Property<string>("LastName")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Engineer");
                });

            modelBuilder.Entity("NIS.DALCore.Context.InjuryType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime");

                    b.Property<int?>("DepartmentId");

                    b.Property<string>("Description")
                        .HasMaxLength(250);

                    b.Property<int?>("ExecutionDay");

                    b.Property<string>("Name")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("InjuryType");
                });

            modelBuilder.Entity("NIS.DALCore.Context.LawProcess", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double?>("Amount");

                    b.Property<string>("Court");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime");

                    b.Property<int>("CustomerRequestId");

                    b.Property<string>("Description")
                        .HasMaxLength(250);

                    b.Property<bool>("Final");

                    b.Property<DateTime?>("InputDateTime");

                    b.Property<string>("Judge");

                    b.Property<DateTime>("OrderDateTime");

                    b.Property<string>("OrderNo");

                    b.HasKey("Id");

                    b.HasIndex("CustomerRequestId");

                    b.ToTable("LawProcess");
                });

            modelBuilder.Entity("NIS.DALCore.Context.MainTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("CustomerRequestId");

                    b.Property<int?>("DepartmentId");

                    b.Property<string>("Description")
                        .HasMaxLength(250);

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ExecutorUserId");

                    b.Property<int>("GeneratedUserId");

                    b.Property<int?>("InjuryTypeId");

                    b.Property<int?>("MainTaskId");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProjectId");

                    b.Property<string>("ProjectName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RatingId");

                    b.Property<int?>("RealInjuryTypeId");

                    b.Property<int?>("TaskStatusId");

                    b.Property<int?>("UpdatedUserId");

                    b.HasKey("Id");

                    b.HasIndex("CustomerRequestId");

                    b.HasIndex("GeneratedUserId");

                    b.HasIndex("InjuryTypeId");

                    b.HasIndex("MainTaskId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("RatingId");

                    b.HasIndex("RealInjuryTypeId");

                    b.HasIndex("TaskStatusId");

                    b.HasIndex("UpdatedUserId")
                        .HasName("IX_UpdatedUserId");

                    b.HasIndex("DepartmentId", "GeneratedUserId", "MainTaskId", "ExecutorUserId")
                        .HasName("_dta_index_MainTask_14_2099048__K9_K2_K12_K4");

                    b.HasIndex("ExecutorUserId", "MainTaskId", "GeneratedUserId", "DepartmentId")
                        .HasName("_dta_index_MainTask_14_2099048__K4_K12_K2_K9");

                    b.HasIndex("Id", "CustomerRequestId", "ExecutorUserId", "InjuryTypeId", "CreatedDate", "EndDate", "Description", "DepartmentId", "TaskStatusId", "ProjectId", "MainTaskId", "RatingId", "Note", "RealInjuryTypeId", "ProjectName", "UpdatedUserId", "GeneratedUserId")
                        .HasName("_dta_index_MainTask_14_2099048__K2_1_3_4_5_6_7_8_9_10_11_12_13_14_15_16_17_18");

                    b.HasIndex("Id", "GeneratedUserId", "CustomerRequestId", "ExecutorUserId", "CreatedDate", "EndDate", "Description", "DepartmentId", "TaskStatusId", "ProjectId", "MainTaskId", "RatingId", "Note", "RealInjuryTypeId", "ProjectName", "UpdatedUserId", "InjuryTypeId")
                        .HasName("_dta_index_MainTask_14_2099048__K5_1_2_3_4_6_7_8_9_10_11_12_13_14_15_16_17_18");

                    b.HasIndex("Id", "GeneratedUserId", "CustomerRequestId", "ExecutorUserId", "InjuryTypeId", "CreatedDate", "EndDate", "Description", "DepartmentId", "ProjectId", "MainTaskId", "RatingId", "Note", "RealInjuryTypeId", "ProjectName", "UpdatedUserId", "TaskStatusId")
                        .HasName("_dta_index_MainTask_14_2099048__K10_1_2_3_4_5_6_7_8_9_11_12_13_14_15_16_17_18");

                    b.HasIndex("Id", "GeneratedUserId", "CustomerRequestId", "ExecutorUserId", "InjuryTypeId", "CreatedDate", "EndDate", "Description", "DepartmentId", "TaskStatusId", "MainTaskId", "RatingId", "Note", "RealInjuryTypeId", "ProjectName", "UpdatedUserId", "ProjectId")
                        .HasName("_dta_index_MainTask_14_2099048__K11_1_2_3_4_5_6_7_8_9_10_12_13_14_15_16_17_18");

                    b.HasIndex("Id", "GeneratedUserId", "CustomerRequestId", "ExecutorUserId", "InjuryTypeId", "CreatedDate", "EndDate", "Description", "DepartmentId", "TaskStatusId", "ProjectId", "MainTaskId", "Note", "RealInjuryTypeId", "ProjectName", "UpdatedUserId", "RatingId")
                        .HasName("_dta_index_MainTask_14_2099048__K13_1_2_3_4_5_6_7_8_9_10_11_12_14_15_16_17_18");

                    b.HasIndex("Id", "GeneratedUserId", "CustomerRequestId", "ExecutorUserId", "InjuryTypeId", "CreatedDate", "EndDate", "Description", "DepartmentId", "TaskStatusId", "ProjectId", "MainTaskId", "RatingId", "Note", "ProjectName", "UpdatedUserId", "RealInjuryTypeId")
                        .HasName("_dta_index_MainTask_14_2099048__K15_1_2_3_4_5_6_7_8_9_10_11_12_13_14_16_17_18");

                    b.HasIndex("Id", "GeneratedUserId", "CustomerRequestId", "ExecutorUserId", "InjuryTypeId", "CreatedDate", "EndDate", "Description", "DepartmentId", "TaskStatusId", "ProjectId", "RatingId", "Note", "RealInjuryTypeId", "ProjectName", "UpdatedUserId", "MainTaskId")
                        .HasName("_dta_index_MainTask_14_2099048__K12_1_2_3_4_5_6_7_8_9_10_11_13_14_15_16_17_18");

                    b.HasIndex("Id", "GeneratedUserId", "CustomerRequestId", "ExecutorUserId", "InjuryTypeId", "CreatedDate", "EndDate", "Description", "TaskStatusId", "ProjectId", "MainTaskId", "RatingId", "Note", "RealInjuryTypeId", "ProjectName", "UpdatedUserId", "DepartmentId")
                        .HasName("_dta_index_MainTask_14_2099048__K9_1_2_3_4_5_6_7_8_10_11_12_13_14_15_16_17_18");

                    b.HasIndex("Id", "GeneratedUserId", "CustomerRequestId", "InjuryTypeId", "CreatedDate", "EndDate", "Description", "TaskStatusId", "ProjectId", "MainTaskId", "RatingId", "Note", "RealInjuryTypeId", "ProjectName", "UpdatedUserId", "ExecutorUserId", "DepartmentId")
                        .HasName("_dta_index_MainTask_14_2099048__K4_K9_1_2_3_5_6_7_8_10_11_12_13_14_15_16_17_18");

                    b.HasIndex("Id", "GeneratedUserId", "ExecutorUserId", "InjuryTypeId", "CreatedDate", "EndDate", "Description", "DepartmentId", "TaskStatusId", "ProjectId", "MainTaskId", "RatingId", "Note", "RealInjuryTypeId", "ProjectName", "UpdatedUserId", "CustomerRequestId")
                        .HasName("_dta_index_MainTask_14_2099048__K3_1_2_4_5_6_7_8_9_10_11_12_13_14_15_16_17_18");

                    b.ToTable("MainTask");
                });

            modelBuilder.Entity("NIS.DALCore.Context.MigrationHistory", b =>
                {
                    b.Property<string>("MigrationId")
                        .HasMaxLength(150);

                    b.Property<string>("ContextKey")
                        .HasMaxLength(300);

                    b.Property<byte[]>("Model")
                        .IsRequired();

                    b.Property<string>("ProductVersion")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.HasKey("MigrationId", "ContextKey");

                    b.HasAlternateKey("ContextKey", "MigrationId");

                    b.ToTable("__MigrationHistory");
                });

            modelBuilder.Entity("NIS.DALCore.Context.Node", b =>
                {
                    b.Property<int>("Id");

                    b.Property<int?>("AreaId");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(250);

                    b.Property<string>("Name")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.ToTable("Node");
                });

            modelBuilder.Entity("NIS.DALCore.Context.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .HasColumnType("ntext");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasMaxLength(250);

                    b.Property<int>("NotificationTypeId");

                    b.Property<string>("Subject")
                        .HasMaxLength(250);

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("NotificationTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("Notification");
                });

            modelBuilder.Entity("NIS.DALCore.Context.NotificationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("Description");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("NotificationType");
                });

            modelBuilder.Entity("NIS.DALCore.Context.NotificationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(250);

                    b.Property<int?>("NotificationId");

                    b.Property<bool>("Status");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("NotificationId");

                    b.HasIndex("UserId");

                    b.HasIndex("Id", "NotificationId", "CreatedDate", "Description", "UserId", "Status")
                        .HasName("_dta_index_NotificationUser_14_1013578649__K2_K6_1_3_4_5");

                    b.ToTable("NotificationUser");
                });

            modelBuilder.Entity("NIS.DALCore.Context.PhoneNumber", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ADSL")
                        .HasColumnName("ADSL ")
                        .HasMaxLength(50);

                    b.Property<string>("CableBox");

                    b.Property<string>("CaseNumber");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(250);

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("ProviderName")
                        .HasMaxLength(100);

                    b.Property<string>("Strip");

                    b.Property<string>("StripPair");

                    b.Property<int?>("SubscriberId");

                    b.HasKey("Id");

                    b.HasIndex("SubscriberId");

                    b.ToTable("PhoneNumber");
                });

            modelBuilder.Entity("NIS.DALCore.Context.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime");

                    b.Property<int?>("DepartmentId");

                    b.Property<string>("Description")
                        .HasMaxLength(250);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Project");
                });

            modelBuilder.Entity("NIS.DALCore.Context.Rating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(250);

                    b.Property<int>("RequestPoint");

                    b.Property<int>("TaskPoint");

                    b.HasKey("Id");

                    b.ToTable("Rating");
                });

            modelBuilder.Entity("NIS.DALCore.Context.RealTimeConnection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConnectionId")
                        .HasMaxLength(250);

                    b.Property<string>("Description")
                        .HasMaxLength(250);

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RealTimeConnection");
                });

            modelBuilder.Entity("NIS.DALCore.Context.Region", b =>
                {
                    b.Property<int>("Id");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(250);

                    b.Property<string>("Email")
                        .HasMaxLength(50);

                    b.Property<int?>("EngineerId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int?>("Phone");

                    b.Property<int?>("RegionPrefix");

                    b.HasKey("Id");

                    b.ToTable("Region");
                });

            modelBuilder.Entity("NIS.DALCore.Context.RequestEmail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime");

                    b.Property<int>("CustomerRequestId");

                    b.Property<string>("Description")
                        .HasMaxLength(250);

                    b.Property<string>("Email")
                        .HasMaxLength(50);

                    b.Property<string>("Message")
                        .HasColumnType("ntext");

                    b.Property<string>("Subject")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.HasIndex("CustomerRequestId");

                    b.ToTable("RequestEmail");
                });

            modelBuilder.Entity("NIS.DALCore.Context.RequestFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(250);

                    b.Property<string>("FilePath")
                        .HasMaxLength(250);

                    b.Property<int>("RequestId");

                    b.HasKey("Id");

                    b.ToTable("RequestFile");
                });

            modelBuilder.Entity("NIS.DALCore.Context.RequestStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(250);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("RequestStatus");
                });

            modelBuilder.Entity("NIS.DALCore.Context.RequestStatusHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CustomerRequestId");

                    b.Property<string>("Description")
                        .HasMaxLength(250);

                    b.Property<int>("RequestStatusId");

                    b.Property<DateTime?>("UpdatedDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("UpdatedUserId");

                    b.HasKey("Id");

                    b.HasIndex("CustomerRequestId");

                    b.HasIndex("UpdatedUserId");

                    b.HasIndex("RequestStatusId", "UpdatedUserId", "UpdatedDate", "Description", "Id", "CustomerRequestId")
                        .HasName("_dta_index_RequestStatusHistory_14_1301579675__K1_2_3_4_5_6");

                    b.ToTable("RequestStatusHistory");
                });

            modelBuilder.Entity("NIS.DALCore.Context.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("NIS.DALCore.Context.SourceType", b =>
                {
                    b.Property<int>("Id");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(250);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("SourceType");
                });

            modelBuilder.Entity("NIS.DALCore.Context.Subscriber", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasMaxLength(250);

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(250);

                    b.Property<string>("Email")
                        .HasMaxLength(50);

                    b.Property<string>("FatherName");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<string>("MobilePhone")
                        .HasMaxLength(30);

                    b.Property<string>("Name")
                        .HasMaxLength(50);

                    b.Property<string>("Organisation")
                        .HasMaxLength(100);

                    b.Property<string>("PassportNumber")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.ToTable("Subscriber");
                });

            modelBuilder.Entity("NIS.DALCore.Context.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(250);

                    b.Property<int?>("MainTaskId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("MainTaskId");

                    b.ToTable("Tag");
                });

            modelBuilder.Entity("NIS.DALCore.Context.TaskHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<int>("MainTaskId");

                    b.Property<int?>("Type");

                    b.Property<DateTime?>("UpdatedDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime");

                    b.Property<int?>("UpdatedUserId");

                    b.HasKey("Id");

                    b.HasIndex("MainTaskId")
                        .HasName("IX_MainTaskId");

                    b.ToTable("TaskHistory");
                });

            modelBuilder.Entity("NIS.DALCore.Context.TaskStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(250);

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("TaskStatus");
                });

            modelBuilder.Entity("NIS.DALCore.Context.TaskStatusHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(250);

                    b.Property<int>("MainTaskId");

                    b.Property<int>("TaskStatusId");

                    b.Property<DateTime?>("UpdatedDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("UpdatedUserId");

                    b.HasKey("Id");

                    b.HasIndex("TaskStatusId");

                    b.HasIndex("MainTaskId", "UpdatedUserId", "UpdatedDate", "Description", "Id", "TaskStatusId")
                        .HasName("_dta_index_TaskStatusHistory_14_1493580359__K1_2_3_4_5_6");

                    b.ToTable("TaskStatusHistory");
                });

            modelBuilder.Entity("NIS.DALCore.Context.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AccessFailedCount");

                    b.Property<string>("ConnectedId")
                        .HasMaxLength(250);

                    b.Property<int?>("DepartmentId");

                    b.Property<string>("Email")
                        .HasMaxLength(50);

                    b.Property<string>("FirstName")
                        .HasMaxLength(30);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastLoginDate")
                        .HasColumnType("datetime");

                    b.Property<string>("LastName")
                        .HasMaxLength(30);

                    b.Property<string>("MobileNumber")
                        .HasMaxLength(50);

                    b.Property<int?>("ParentUserId");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(50);

                    b.Property<string>("Salt")
                        .HasMaxLength(32);

                    b.Property<string>("UserName")
                        .HasMaxLength(50);

                    b.Property<string>("UserTempId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("Id", "ParentUserId")
                        .HasName("_dta_index_User_14_1525580473__K1_K10");

                    b.HasIndex("ParentUserId", "Id")
                        .HasName("_dta_index_User_14_1525580473__K10_K1");

                    b.HasIndex("Id", "Email", "Password", "MobileNumber", "AccessFailedCount", "PhoneNumber", "LastLoginDate", "ConnectedId", "ParentUserId", "FirstName", "LastName", "Salt", "DepartmentId", "UserTempId", "IsDeleted", "UserName")
                        .HasName("_dta_index_User_14_1525580473__K6_1_2_3_4_5_7_8_9_10_11_12_13_16_17_18");

                    b.HasIndex("Id", "Email", "Password", "MobileNumber", "AccessFailedCount", "UserName", "PhoneNumber", "LastLoginDate", "ConnectedId", "FirstName", "LastName", "Salt", "DepartmentId", "UserTempId", "IsDeleted", "ParentUserId")
                        .HasName("_dta_index_User_14_1525580473__K10_1_2_3_4_5_6_7_8_9_11_12_13_16_17_18");

                    b.ToTable("User");
                });

            modelBuilder.Entity("NIS.DALCore.Context.UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasMaxLength(250);

                    b.Property<string>("ClaimValue")
                        .HasMaxLength(250);

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaim");
                });

            modelBuilder.Entity("NIS.DALCore.Context.UserRoles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("RoleId");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("NIS.DALCore.Context.UserSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime");

                    b.Property<string>("Description");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Settings")
                        .IsRequired();

                    b.Property<int>("Type");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .HasName("IX_UserId");

                    b.ToTable("UserSettings");
                });

            modelBuilder.Entity("NIS.DALCore.Context.WorkFlow", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConditionKey");

                    b.Property<string>("ConditionValue");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("CustomerRequestId");

                    b.Property<int>("DepartmentId");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.ToTable("WorkFlow");
                });

            modelBuilder.Entity("NIS.DALCore.Context.Area", b =>
                {
                    b.HasOne("NIS.DALCore.Context.Region", "Region")
                        .WithMany("Area")
                        .HasForeignKey("RegionId")
                        .HasConstraintName("FK_dbo.Area_Region")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NIS.DALCore.Context.Attachment", b =>
                {
                    b.HasOne("NIS.DALCore.Context.Comment", "Comment")
                        .WithMany("Attachment")
                        .HasForeignKey("CommentId");

                    b.HasOne("NIS.DALCore.Context.CustomerRequest", "CustomerRequest")
                        .WithMany("Attachment")
                        .HasForeignKey("CustomerRequestId");

                    b.HasOne("NIS.DALCore.Context.MainTask", "MainTask")
                        .WithMany("Attachment")
                        .HasForeignKey("MainTaskId");
                });

            modelBuilder.Entity("NIS.DALCore.Context.Comment", b =>
                {
                    b.HasOne("NIS.DALCore.Context.MainTask", "MainTask")
                        .WithMany("Comment")
                        .HasForeignKey("MainTaskId")
                        .HasConstraintName("FK_dbo.comment_Maintask")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NIS.DALCore.Context.User", "User")
                        .WithMany("Comment")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_dbo.comment_User");
                });

            modelBuilder.Entity("NIS.DALCore.Context.CustomerRequest", b =>
                {
                    b.HasOne("NIS.DALCore.Context.User", "CreatedUser")
                        .WithMany("CustomerRequest")
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NIS.DALCore.Context.CustomerRequestType", "CustomerRequestType")
                        .WithMany("CustomerRequest")
                        .HasForeignKey("CustomerRequestTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NIS.DALCore.Context.Department", "Department")
                        .WithMany("CustomerRequest")
                        .HasForeignKey("DepartmentId");

                    b.HasOne("NIS.DALCore.Context.Rating", "Rating")
                        .WithMany()
                        .HasForeignKey("RatingId");

                    b.HasOne("NIS.DALCore.Context.Region", "Region")
                        .WithMany("CustomerRequest")
                        .HasForeignKey("RegionId");

                    b.HasOne("NIS.DALCore.Context.RequestStatus", "RequestStatus")
                        .WithMany("CustomerRequest")
                        .HasForeignKey("RequestStatusId");

                    b.HasOne("NIS.DALCore.Context.SourceType", "SourceType")
                        .WithMany("CustomerRequest")
                        .HasForeignKey("SourceTypeId");
                });

            modelBuilder.Entity("NIS.DALCore.Context.CustomerRequestType", b =>
                {
                    b.HasOne("NIS.DALCore.Context.Department", "Department")
                        .WithMany("CustomerRequestType")
                        .HasForeignKey("DepartmentId");

                    b.HasOne("NIS.DALCore.Context.CustomerRequestType", "ParentRequestType")
                        .WithMany("ChildRequestTypes")
                        .HasForeignKey("ParentRequestTypeId");

                    b.HasOne("NIS.DALCore.Context.SourceType", "SourceType")
                        .WithMany("CustomerRequestType")
                        .HasForeignKey("SourceTypeId");
                });

            modelBuilder.Entity("NIS.DALCore.Context.Department", b =>
                {
                    b.HasOne("NIS.DALCore.Context.User", "DefaultUser")
                        .WithMany("DefaultDepartment")
                        .HasForeignKey("DefaultUserId")
                        .HasConstraintName("FK_dbo.department_USer");

                    b.HasOne("NIS.DALCore.Context.Department", "ParentDepartment")
                        .WithMany("ChildDepartments")
                        .HasForeignKey("ParentDepartmentId");
                });

            modelBuilder.Entity("NIS.DALCore.Context.InjuryType", b =>
                {
                    b.HasOne("NIS.DALCore.Context.Department", "Department")
                        .WithMany("InjuryTypes")
                        .HasForeignKey("DepartmentId");
                });

            modelBuilder.Entity("NIS.DALCore.Context.LawProcess", b =>
                {
                    b.HasOne("NIS.DALCore.Context.CustomerRequest", "CustomerRequest")
                        .WithMany()
                        .HasForeignKey("CustomerRequestId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NIS.DALCore.Context.MainTask", b =>
                {
                    b.HasOne("NIS.DALCore.Context.CustomerRequest", "CustomerRequest")
                        .WithMany("MainTask")
                        .HasForeignKey("CustomerRequestId")
                        .HasConstraintName("FK_dbo.Maintask_Request");

                    b.HasOne("NIS.DALCore.Context.Department", "Department")
                        .WithMany("MainTask")
                        .HasForeignKey("DepartmentId");

                    b.HasOne("NIS.DALCore.Context.User", "ExecutorUser")
                        .WithMany("ExecutedTask")
                        .HasForeignKey("ExecutorUserId")
                        .HasConstraintName("FK_dbo.maintask_ExecuterUSer");

                    b.HasOne("NIS.DALCore.Context.User", "GeneratedUser")
                        .WithMany("MainTask")
                        .HasForeignKey("GeneratedUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NIS.DALCore.Context.InjuryType", "InjuryType")
                        .WithMany("MainTask")
                        .HasForeignKey("InjuryTypeId");

                    b.HasOne("NIS.DALCore.Context.MainTask", "ParentTask")
                        .WithMany("ChildTasks")
                        .HasForeignKey("MainTaskId");

                    b.HasOne("NIS.DALCore.Context.Project", "Project")
                        .WithMany("MainTask")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("FK_dbo.MainTask_dbo.Project_ProjectId");

                    b.HasOne("NIS.DALCore.Context.Rating", "Rating")
                        .WithMany()
                        .HasForeignKey("RatingId");

                    b.HasOne("NIS.DALCore.Context.InjuryType", "RealInjuryType")
                        .WithMany("RealMainTask")
                        .HasForeignKey("RealInjuryTypeId");

                    b.HasOne("NIS.DALCore.Context.TaskStatus", "TaskStatus")
                        .WithMany("MainTask")
                        .HasForeignKey("TaskStatusId");

                    b.HasOne("NIS.DALCore.Context.User", "UpdateddUser")
                        .WithMany("UpdatedTask")
                        .HasForeignKey("UpdatedUserId")
                        .HasConstraintName("FK_dbo.maintask_USer");
                });

            modelBuilder.Entity("NIS.DALCore.Context.Node", b =>
                {
                    b.HasOne("NIS.DALCore.Context.Area", "Area")
                        .WithMany("Node")
                        .HasForeignKey("AreaId");
                });

            modelBuilder.Entity("NIS.DALCore.Context.Notification", b =>
                {
                    b.HasOne("NIS.DALCore.Context.NotificationType", "NotificationType")
                        .WithMany("Notifications")
                        .HasForeignKey("NotificationTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NIS.DALCore.Context.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("NIS.DALCore.Context.NotificationUser", b =>
                {
                    b.HasOne("NIS.DALCore.Context.Notification", "Notification")
                        .WithMany()
                        .HasForeignKey("NotificationId");

                    b.HasOne("NIS.DALCore.Context.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NIS.DALCore.Context.PhoneNumber", b =>
                {
                    b.HasOne("NIS.DALCore.Context.Subscriber", "Subscriber")
                        .WithMany("PhoneNumber")
                        .HasForeignKey("SubscriberId");
                });

            modelBuilder.Entity("NIS.DALCore.Context.Project", b =>
                {
                    b.HasOne("NIS.DALCore.Context.Department", "Department")
                        .WithMany("Project")
                        .HasForeignKey("DepartmentId");
                });

            modelBuilder.Entity("NIS.DALCore.Context.RealTimeConnection", b =>
                {
                    b.HasOne("NIS.DALCore.Context.User", "User")
                        .WithMany("RealTimeConnection")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NIS.DALCore.Context.RequestEmail", b =>
                {
                    b.HasOne("NIS.DALCore.Context.CustomerRequest", "CustomerRequest")
                        .WithMany("RequestEmail")
                        .HasForeignKey("CustomerRequestId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NIS.DALCore.Context.RequestStatusHistory", b =>
                {
                    b.HasOne("NIS.DALCore.Context.CustomerRequest", "CustomerRequest")
                        .WithMany("RequestStatusHistory")
                        .HasForeignKey("CustomerRequestId")
                        .HasConstraintName("FK_Requeststatus_request")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NIS.DALCore.Context.RequestStatus", "RequestStatus")
                        .WithMany("RequestStatusHistory")
                        .HasForeignKey("RequestStatusId")
                        .HasConstraintName("FK_RequeststatusHistory_requestStatus")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NIS.DALCore.Context.User", "User")
                        .WithMany("RequestStatusHistory")
                        .HasForeignKey("UpdatedUserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NIS.DALCore.Context.Tag", b =>
                {
                    b.HasOne("NIS.DALCore.Context.MainTask", "MainTask")
                        .WithMany("Tag")
                        .HasForeignKey("MainTaskId");
                });

            modelBuilder.Entity("NIS.DALCore.Context.TaskHistory", b =>
                {
                    b.HasOne("NIS.DALCore.Context.MainTask", "MainTask")
                        .WithMany("TaskHistory")
                        .HasForeignKey("MainTaskId")
                        .HasConstraintName("FK_dbo.TaskHistory_dbo.MainTask_MainTaskId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NIS.DALCore.Context.TaskStatusHistory", b =>
                {
                    b.HasOne("NIS.DALCore.Context.TaskStatus", "TaskStatus")
                        .WithMany("TaskStatusHistory")
                        .HasForeignKey("TaskStatusId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NIS.DALCore.Context.User", b =>
                {
                    b.HasOne("NIS.DALCore.Context.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId");

                    b.HasOne("NIS.DALCore.Context.User", "ParentUser")
                        .WithMany("ChildUsers")
                        .HasForeignKey("ParentUserId");
                });

            modelBuilder.Entity("NIS.DALCore.Context.UserClaim", b =>
                {
                    b.HasOne("NIS.DALCore.Context.User", "User")
                        .WithMany("UserClaim")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("NIS.DALCore.Context.UserRoles", b =>
                {
                    b.HasOne("NIS.DALCore.Context.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NIS.DALCore.Context.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NIS.DALCore.Context.UserSettings", b =>
                {
                    b.HasOne("NIS.DALCore.Context.User", "User")
                        .WithMany("UserSettings")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_dbo.UserSettings_dbo.User_UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
